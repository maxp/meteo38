// Generated by CoffeeScript 1.12.7
(function() {
  var NONCE_LENGTH, SESS_COLLECTION, SESS_COOKIE, SESS_IPS, SESS_MAXAGE, SESS_TMP, SESS_TS, Sess, db, debug, info, load, make_sid, ref, util, warn, x;

  x = typeof exports !== "undefined" && exports !== null ? exports : this;

  SESS_COLLECTION = 'sess';

  SESS_COOKIE = "sid";

  SESS_MAXAGE = 365 * 24 * 3600 * 1000;

  SESS_IPS = "ips";

  SESS_TS = "ts";

  SESS_TMP = "tmp";

  NONCE_LENGTH = 10;

  util = require('./index');

  ref = require('./logger'), debug = ref.debug, info = ref.info, warn = ref.warn;

  db = require('../lib/db');

  make_sid = function() {
    var i;
    return (new Date()).getTime().toString(16) + "." + (((function() {
      var j, len, ref1, results;
      ref1 = util.urandom(NONCE_LENGTH);
      results = [];
      for (j = 0, len = ref1.length; j < len; j++) {
        i = ref1[j];
        results.push(('0' + i.toString(16)).slice(-2));
      }
      return results;
    })()).join(''));
  };


  /*
  
  db.sess: 
    _id: "hex(ts).hex(rnd)"
    ts: lastmod_timestamp
    st: int(-1: inactive, 0: temporary, 1: persistent)
    kv: {uid: "..."}
   */

  Sess = (function() {
    function Sess(id, dat) {
      this.sid = id;
      this.data = dat;
      this.mk = null;
      this.fixed = false;
    }

    Sess.prototype.new_sid = function() {
      return this.sid = make_sid();
    };

    Sess.prototype.get = function(key, defval) {
      var ref1;
      return (ref1 = this.data[key]) != null ? ref1 : defval;
    };

    Sess.prototype.set = function(key, val) {
      if (this.fixed) {
        warn("sess.set failed: " + key);
        return this;
      }
      if (this.mk == null) {
        this.mk = {};
        if (this.sid == null) {
          this.sid = make_sid();
        }
      }
      this.mk[key] = val != null;
      this.data[key] = val;
      return this;
    };

    return Sess;

  })();

  load = function(sid, cb) {
    return db.coll(SESS_COLLECTION).findOne({
      _id: sid
    }, {
      _id: 0
    }, function(err, data) {
      if (err != null) {
        warn("sess.load:", err);
      }
      if (!err && sid && (data != null)) {
        return cb(sid, data);
      } else {
        return cb(null, {});
      }
    });
  };

  x.middleware = function() {
    return function(req, res, next) {
      if (req.sess != null) {
        return next();
      }
      res.on("header", function() {
        var fset, k, opts, ref1, sess, unset, v;
        sess = req.sess;
        if (!sess || !req.sess.mk) {
          return;
        }
        sess.set(SESS_IPS, req.ips).set(SESS_TS, new Date());
        sess.fixed = true;
        opts = {
          httpOnly: true
        };
        if (!sess.get(SESS_TMP)) {
          opts.maxAge = SESS_MAXAGE;
        }
        res.cookie(SESS_COOKIE, sess.sid, opts);
        fset = {};
        unset = {};
        ref1 = sess.mk;
        for (k in ref1) {
          v = ref1[k];
          if (v) {
            fset[k] = sess.data[k];
          } else {
            unset[k] = 1;
          }
        }
        return db.coll(SESS_COLLECTION).update({
          _id: sess.sid
        }, {
          $set: fset,
          $unset: unset
        }, {
          upsert: true
        }, function(err, dat) {
          if (err != null) {
            return warn("sess.save: " + sess.sid, err);
          }
        });
      });
      return load(req.cookies[SESS_COOKIE], function(sid, data) {
        req.sess = new Sess(sid, data);
        return next();
      });
    };
  };

}).call(this);
