// Generated by CoffeeScript 1.9.3
(function() {
  var config, format_args, inspect, logger, moment, winston, x,
    slice = [].slice;

  x = typeof exports !== "undefined" && exports !== null ? exports : this;

  config = require('./config');

  moment = require('moment');

  inspect = require('util').inspect;

  winston = require('winston');

  logger = new winston.Logger({
    transports: [
      new winston.transports.Console({
        timestamp: function() {
          return moment().format("MMM.DD HH:mm:ss");
        },
        level: "debug"
      }), new winston.transports.File({
        name: "file#all",
        filename: config.logger.all,
        timestamp: function() {
          return moment().format("MMM.DD HH:mm:ss");
        },
        level: "debug",
        json: false
      }), new winston.transports.File({
        name: "file#err",
        filename: config.logger.err,
        timestamp: function() {
          return moment().format("MMM.DD HH:mm:ss");
        },
        level: "warn",
        json: false
      })
    ]
  });

  format_args = function() {
    var args, i, len, msg, res, s;
    msg = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
    res = [msg];
    for (i = 0, len = args.length; i < len; i++) {
      s = args[i];
      if (s == null) {
        res.push("[Nil]");
      } else if (s instanceof Date) {
        res.push(moment(s).format("YYYY.MM.DD-HH:mm:ss"));
      } else {
        res.push(inspect(s, false, 4, false));
      }
    }
    return res.join(' ');
  };

  x.log = logger.log;

  x.info = function() {
    var args;
    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    return logger.log("info", format_args.apply(null, args));
  };

  x.warn = function() {
    var args;
    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    return logger.log("warn", format_args.apply(null, args));
  };

  x.debug = function() {
    var args;
    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    return logger.log("debug", format_args.apply(null, args));
  };

}).call(this);
