// Generated by CoffeeScript 1.12.7
(function() {
  var DATA_FRESH, ST_FRESH, ST_ID_MAX_LEN, ST_LIST_MAX, db, debug, info, isArray, lib, ref, warn, x;

  x = typeof exports !== "undefined" && exports !== null ? exports : this;

  ST_LIST_MAX = 30;

  ST_ID_MAX_LEN = 64;

  ST_FRESH = 7 * 24 * 3600 * 1000;

  DATA_FRESH = 2 * 3600 * 1000;

  isArray = require('util').isArray;

  db = require('../lib/db');

  lib = require('../lib');

  ref = require('../lib/logger'), debug = ref.debug, info = ref.info, warn = ref.warn;

  x.st_list_cleanup = function(s) {
    var res, t;
    if (!(s != null ? s.length : void 0)) {
      return [];
    }
    s = ("" + s).split(',').slice(0, ST_LIST_MAX);
    res = (function() {
      var i, len, results;
      results = [];
      for (i = 0, len = s.length; i < len; i++) {
        t = s[i];
        results.push(t.replace(/[^0-9a-zA-Z\-_]/g, '').substring(0, ST_ID_MAX_LEN));
      }
      return results;
    })();
    return (function() {
      var i, len, results;
      results = [];
      for (i = 0, len = res.length; i < len; i++) {
        s = res[i];
        if (s) {
          results.push(s);
        }
      }
      return results;
    })();
  };

  x.fetch_sts = function(st_list, cb) {
    var res;
    res = {};
    return db.coll_st().find({
      _id: {
        $in: st_list
      },
      pub: 1,
      ts: {
        $gte: new Date(lib.now() - DATA_FRESH)
      }
    }, {
      projection: {
        _id: 1,
        title: 1,
        last: 1,
        descr: 1,
        addr: 1,
        ll: 1,
        trends: 1
      }
    }).forEach(function(item) {
      return cb(res)(it(!item));
      return res[item._id] = item;
    });
  };

  x.fetch_data = function(st_list, cb) {
    var res;
    res = {};
    return db.coll_st().find({
      _id: {
        $in: st_list
      },
      pub: 1,
      ts: {
        $gte: new Date(lib.now() - DATA_FRESH)
      }
    }, {
      projection: {
        _id: 1,
        last: 1,
        trends: 1
      }
    }).forEach(function(item) {
      return cb(res)(it(!item));
      return res[item._id] = item;
    });
  };

  x.get_stlist = function(cb) {
    var fresh;
    fresh = lib.now() - ST_FRESH;
    return db.coll_st().find({
      pub: 1,
      ts: {
        $gte: new Date(fresh)
      }
    }, {
      projection: {
        _id: 1,
        title: 1,
        addr: 1,
        descr: 1,
        ll: 1
      }
    }).sort({
      title: 1
    }).toArray(function(err, data) {
      if (err) {
        warn("app.st_list:", err);
        return cb([]);
      }
      return cb(data);
    });
  };

}).call(this);
